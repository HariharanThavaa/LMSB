Common Patterns in Microservice Architectures
==============================================

Chapter's Acheivements
======================

1. You learned how to use a gateway to route traffic to your microservices and provide load balancing between their instances
2. You scaled up a microservice architecture using service discovery, The HTTP load balancer, and RabbitMQ queues
3. You made the system resilient by checking the health of each instance to find out when they don't work.
Also you introduced retries to avoid losing requests
4. You saw how to override configuration per environment with an external configuration server.
5. You implemented centralized logs with distributed traces across microservices, so you can follow a process from end to end
6. You integrated all these patterns in our microservice architecture with the projects from Spring cloud family:
Spring Cloud Gateway, Spring Cloud Load balancer, Spring Cloud Consul (Discovery & Configuration), and Spring Cloud Sleuth
7. You learned how to create Docker images for our applications using Spring Boot 2.3 and Cloud Native Build packs
8. You saw how Docker and Compose can help deploy our microservice architecture anywhere. Besides you saw how easy is to spin up
new instances using Docker
9. You compared the approach we followed in the book with other alternatives such as container platforms and application platforms
which include already some of the patterns you need for a distributed architecture
10. You understood why we introduced the new patterns and tools in every step you made in the chapter.


What we going to learn
1. Service Discovery
2. Health Detection
3. Configuration Management
4. Logging
5. Tracing
6. End to end Testing and etc.


Gateway
=======
1. Frontend should connect to single server with multiple APIs
2. Keep the frontend logic simple as possible, Load balancing should go to backend
3. User authentication and security should be in one layer


Browser to Gateway
Send Attempt
Get User Alias
Get Leaderboard

Gateway
Filters
Routing

Gateway to Multiplcation
Send Attemtpt
Get User Alias

Multiplcation to Gamification QUEUE
Attmpts (Topic Exchange)

Gamification queue to Gamification

Gateway to Gamification
Get Leaderboard

One of the primary purpose of gateway is restrict access to backend system. This can be acheived by containerization.

Spring Cloud Gateway
====================

Spring Cloud provide tools to quickly build common required patterns(cloud patterns) in distributed systems

Ref https://tpd.io/scloud

to learn about netflix gatewy
Ref: https://tpd.io/noss

Core Concepts of Spring Cloud Gateway
=====================================

1. Predicate
A condition to be evaluated to decide where to route a request
Condition builders are based on Request path, request headers, time, remote host etc. (or combination)
Called as Route Predicate since they are always applied to route

2. Route
It's a URI where the request will be proxied to if it matches the assigned predicate.
Address external request to internal microservices.

3. Filter
An optional processor that can be either attached to a route (route filters) or applied globally (global filters) to
all the requests.


Gateway

Route1 -> Service1
PredicateA
PredicateB

Route Filter X

Global Filters


Route2  ->  Service2
Predicate C

Global filters

======================================

Other option to define predicates and filters
1. Shortcut - one line expression
2. Fully expanded configuration

Ref : http://tpd.io/gw-notation


Ex:

Spring:
    cloud:
        gateway:
            routes:
                - id : old-travel-conditions
                    uri : http://oldhost/travel
                    predicates
                        - Before=2021-01-01
                        - Path = /travel-in-spain/**
                - id : change-travel-conditions
                    uri : http://somehost/travel-new
                    predicates :
                        - After=2021-01-01
                        - Pathe= /travel-in-spain/**
                    filters :
                        - AddResponseHeader=X-New-Condition-Apply, 2021 Jan

Main url => http://my.travel.gateway/

To read about predicates
Ref: http://tpd.io/pathpred

above example oldhost and somehost doesn't need to accessed by out side.

For more information on Spring Cloud Gateway Capabilities
Ref: https://tpd.io/gwdocs


Gateway Microservice

Sourcecode available on Chapter08A

Gateway Auto Configuration is located in Gateway dependency on top of spring boot. So which is not part regular autoconfiguration
Ref : https://tpd.io/gwautocfg

Create new microservice
Ref https://tpd.io/spring-starter

In gateway we need to append some CORS configuration
Ref : https://tpd.io/gwcors


Gateway Configuration
=====================
using yml file in Gateway microservice

Any request with http://localhost:8000/attempts -> http://localhost:8080 (Multiplication)
http://localhost:8000//leaders -> http://localhost:8081 (Gamification)


Changes in Other Projects
=========================
Deleter CORS configuration from both Multiplication and Gamification
Update uri in web component

Running the Gateway Microservice
================================

We saw application woring with Gateway
Frontend is not aware about backend

So Next steps
1. Service Discovery
2. Load balancing

Springboot actuator for Health checking

Health
======
To check whether the connected service is up and running

Spring Boot Actuator
====================

Spring Actuator exposes 2 endpoints info and health

info : https://tpd.io/infocp
health : https://tpd.io/acthealth

For more information about spring-boot actuator.
Ref: https://tpd.io/sbactuator


Chapter 08B starts Here
=======================

spring-boot-starter-actuator gives a health check

Add to Multiplication, Gamification and Gateway

If the Rabbitmq is down then multiplication service also down.


Service Discovery and Load Balancing
====================================

Now we know whether the system is availabe or not.
So the time for service discovery and load balancing

1. The service registry
A central place with the list of available services, Address where they are located,and some extra metadata like their name.

Service alias - can get list of available service by querying service alias ( ex : multiplcation is an alias)

2. The registrar
The logic in charge of registering the service instance at the registry.

Regitrar is the logic on microservices
Registry is the logic in Registry

Figure 8.5
==========

Service Registry
Registry
Service List
- multiplication -> host1:8080, host2:9080
- gamification -> host1:8081

Multiplication
host1:8080 - Registrar
host2:9080 - Registrar

Gamification
host1:8081 - Registrar

In order register with service registry microservices should have registrar.


Figure 8.8 Gateway and Service Discovery Integration.

Browser
Send attempt
Get user alias
Get Leader board to Gate Way

Gateway
Service Discovery Client - Spring cloud consule discovery
Load balancer - Spring cloud load balancer
Router - Spring Cloud Gateway

Find Service instances from Service Registry

Service Registry
Registry - Consul

Multiplication
Registrar - Register itself with  Service Registry
Service Discovery Client - Find services from Registry (Spring cloud consul discovery)
Load balancer - HTTP Request (if needed) (spring cloud loadbalancer)

Attmpts (Topic Exchange)

Gamification QUEUE

Gamification
Restrar -> Register itself with Service Registry.


Consul
=======

Service Discovery Pattern : Consul, Eureka, Zookeeper etc

Consul will provide another pattern in micrservice architecture, centralised configuration

https://tpd.io/dlconsul

Deploying consul in production https://tpd.io/consulprod

to start the consul agent
consul agent  -node=learnmicro -dev

Request available services
http -b :8500/v1/agent/services

https://tpd.io/consul-checks

Spring Cloud Consul
====================
Add Spring Cloud Consul dependency to Gamification and Multiplication

For update consul configs
https://tpd.io/consulprops
https://tpd.io/consulconfig

Need to add below properties to both

Running the second instance of the multiplication service

now run the api service of registered instance
http -b :8500/v1/agent/services

{
    "gamification-8081": {
        "Address": "thavaas-mbp",
        "Connect": null,
        "CreateIndex": 0,
        "EnableTagOverride": false,
        "ID": "gamification-8081",
        "Kind": "",
        "Meta": {
            "secure": "false"
        },
        "ModifyIndex": 0,
        "Port": 8081,
        "ProxyDestination": "",
        "Service": "gamification",
        "Tags": []
    },
    "multiplication": {
        "Address": "thavaas-mbp",
        "Connect": null,
        "CreateIndex": 0,
        "EnableTagOverride": false,
        "ID": "multiplication",
        "Kind": "",
        "Meta": {
            "secure": "false"
        },
        "ModifyIndex": 0,
        "Port": 8080,
        "ProxyDestination": "",
        "Service": "multiplication",
        "Tags": []
    },
    "multiplication-9080": {
        "Address": "thavaas-mbp",
        "Connect": null,
        "CreateIndex": 0,
        "EnableTagOverride": false,
        "ID": "multiplication-9080",
        "Kind": "",
        "Meta": {
            "secure": "false"
        },
        "ModifyIndex": 0,
        "Port": 9080,
        "ProxyDestination": "",
        "Service": "multiplication",
        "Tags": []
    }
}


Spring Cloud Load Balancer
==========================

@LoadBalance when creating the rest Template


Service Discovery and Load Balancing in the Gateway
===================================================

Three groups of configuration in application.yml

1. Global settings
We give a name to the application and make sure we use the spring cloud load balancer implementation

2. Routing Configuration
Instead of using expilicit host and ports, we switch to service names with URL pattern that also enables load balancing

3. Resilience
In case the gateway fails to proxy request to service, we want it to retry few times.


Circuit Breaker
===============

Check request, whether system is available
if not available after number of time it's stop
After particular period of time recheck the service available
if not go back to open.

circuit closed connection woring fine
circuti open mean target is not available

Ref :
https://tpd.io/cbreak





























