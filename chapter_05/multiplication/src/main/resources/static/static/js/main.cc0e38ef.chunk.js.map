{"version":3,"sources":["services/ApiClient.js","components/LastAttemptsComponent.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","GET_ATTEMPTS_BY_ALIAS","LastAttemptsComponent","this","props","lastAttempts","map","style","color","correct","resultAttempt","id","React","ChallengeComponent","state","message","handleSubmitResult","bind","handleChange","refreshChallenge","challenge","then","res","ok","json","setState","updateMessage","event","name","target","value","preventDefault","sendGuess","updateLastAttempts","m","getAttempts","attempts","data","forEach","item","push","className","onSubmit","type","maxLength","onChange","min","length","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAAMA,E,8FAMF,WACI,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,uBAGlD,SAAiBC,EACGC,EACAC,EACAC,GAChB,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAC1C,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UACP,CACIC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,Q,yBAO3B,SAAmBO,GACf,OAAOb,MAAMD,EAAUE,WAAaF,EAAUiB,sBAAwBH,O,KAjCxEd,EACKE,WAAa,wBADlBF,EAEKG,cAAgB,qBAFrBH,EAGKQ,YAAc,YAHnBR,EAIKiB,sBAAwB,mBAiCpBjB,Q,OCPAkB,E,4JA1BX,WACI,OACI,kCACI,gCACA,+BACI,2CACA,4CACA,8CAGJ,gCACCC,KAAKC,MAAMC,aAAaC,KAAI,SAAAjB,GAAC,OAC1B,qBACIkB,MAAO,CAAEC,MAAOnB,EAAEoB,QAAU,QAAU,OAD1C,UAEI,+BAAKpB,EAAEU,QAAP,MAAmBV,EAAEW,WACrB,6BAAKX,EAAEqB,gBACP,6BAAKrB,EAAEoB,QAAU,UACZ,cAAgBpB,EAAEU,QAAUV,EAAEW,QAAU,QALxCX,EAAEsB,gB,GAdKC,aC+HrBC,E,kDA3HX,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,CACTzB,EAAG,GAAIC,EAAG,GACVF,KAAM,GACN2B,QAAS,GACTxB,MAAO,EACPc,aAAc,IAElB,EAAKW,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVL,E,qDAanB,WACId,KAAKgB,qB,8BAGT,WAAoB,IAAD,OACfnC,EAAUoC,YAAYC,MAClB,SAAAC,GACQA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACZ,EAAKC,SAAS,CACVpC,EAAGmC,EAAKzB,QACRT,EAAGkC,EAAKxB,aAIhB,EAAK0B,cAAc,+B,0BAMnC,SAAaC,GACT,IAAMC,EAAOD,EAAME,OAAOD,KAC1BzB,KAAKsB,SAAL,eACKG,EAAOD,EAAME,OAAOC,U,gCAI7B,SAAmBH,GAAQ,IAAD,OACtBA,EAAMI,iBACN/C,EAAUgD,UAAU7B,KAAKW,MAAM1B,KAC3Be,KAAKW,MAAMzB,EAAGc,KAAKW,MAAMxB,EACzBa,KAAKW,MAAMvB,OACV8B,MAAK,SAAAC,GACEA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACRA,EAAKf,QACL,EAAKiB,cAAc,0CAEnB,EAAKA,cAAc,oBAAsBF,EAAKd,cAC9C,gCAEJ,EAAKuB,mBAAmB,EAAKnB,MAAM1B,MACnC,EAAK+B,sBAGV,EAAKO,cAAc,6C,2BAKlC,SAAcQ,GACV/B,KAAKsB,SAAS,CACZV,QAASmB,M,gCAIf,SAAmBpC,GAAoB,IAAD,OAClCd,EAAUmD,YAAYrC,GAAWuB,MAAK,SAAAC,GAClC,GAAIA,EAAIC,GAAI,CACR,IAAIa,EAAsB,GAC1Bd,EAAIE,OAAOH,MAAK,SAAAgB,GACZA,EAAKC,SAAQ,SAAAC,GACTH,EAASI,KAAKD,MAElB,EAAKd,SAAS,CACVpB,aAAc+B,a,oBAOlC,WACI,OACI,sBAAKK,UAAU,iBAAf,UACI,gCACI,uDACA,sBAAKA,UAAU,YAAf,UACKtC,KAAKW,MAAMzB,EADhB,MACsBc,KAAKW,MAAMxB,QAGrC,uBAAMoD,SAAUvC,KAAKa,mBAArB,UACI,gDAEI,uBAAO2B,KAAK,OAAOC,UAAU,KACtBhB,KAAK,OACLE,MAAO3B,KAAKW,MAAM1B,KAClByD,SAAU1C,KAAKe,kBAE1B,uBACA,gDAEI,uBAAOyB,KAAK,SAASG,IAAI,IAClBlB,KAAK,QACLE,MAAO3B,KAAKW,MAAMvB,MAClBsD,SAAU1C,KAAKe,kBAE1B,uBACA,uBAAOyB,KAAK,SAASb,MAAM,cAE/B,6BAAK3B,KAAKW,MAAMC,UACfZ,KAAKW,MAAMT,aAAa0C,OAAS,GAC9B,cAAC,EAAD,CAAuB1C,aAAcF,KAAKW,MAAMT,sB,GAtHnCO,aCIlBoC,MAJf,WACE,OAAO,cAAC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cc0e38ef.chunk.js","sourcesContent":["class ApiClient{\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\n\n    static challenge(): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user: string,\n                        a:number,\n                        b:number,\n                        guess:number) : Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify (\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n                )\n            }\n        );\n    }\n\n    static getAttempts(userAlias: string): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\n    }\n}\n\nexport default ApiClient;","import * as React from 'react';\n\nclass LastAttemptsComponent extends React.Component {\n\n    render() {\n        return (\n            <table>\n                <thead>\n                <tr>\n                    <th>Challenge</th>\n                    <th>Your guess</th>\n                    <th>Correct</th>\n                </tr>\n                </thead>\n                <tbody>\n                {this.props.lastAttempts.map(a =>\n                    <tr key={a.id}\n                        style={{ color: a.correct ? 'green' : 'red' }}>\n                        <td>{a.factorA} x {a.factorB}</td>\n                        <td>{a.resultAttempt}</td>\n                        <td>{a.correct ? \"Correct\" :\n                            (\"Incorrect (\" + a.factorA * a.factorB + \")\")}</td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default LastAttemptsComponent;","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\nimport LastAttemptsComponent from './LastAttemptsComponent';\n\nclass ChallengeComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            a: '', b: '',\n            user: '',\n            message: '',\n            guess: 0,\n            lastAttempts: [],\n        };\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.refreshChallenge();\n    }\n\n    refreshChallenge() {\n        ApiClient.challenge().then(\n            res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        this.setState({\n                            a: json.factorA,\n                            b: json.factorB\n                        });\n                    });\n                } else {\n                    this.updateMessage(\"Can't reach the server\");\n                }\n            }\n        );\n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ApiClient.sendGuess(this.state.user,\n            this.state.a, this.state.b,\n            this.state.guess)\n            .then(res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        if (json.correct) {\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\n                        } else {\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\n                            \" is wrong, but keep playing!\");\n                        }\n                        this.updateLastAttempts(this.state.user);\n                        this.refreshChallenge();\n                    });\n                } else {\n                   this.updateMessage(\"Error: server error or not available\");\n                }\n            });\n    }\n\n    updateMessage(m: string) {\n        this.setState({\n          message: m\n        });\n    }\n\n    updateLastAttempts(userAlias: string) {\n        ApiClient.getAttempts(userAlias).then(res => {\n            if (res.ok) {\n                let attempts: Attempt[] = [];\n                res.json().then(data => {\n                    data.forEach(item => {\n                        attempts.push(item);\n                    });\n                    this.setState({\n                        lastAttempts: attempts\n                    });\n                })\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"display-column\">\n                <div>\n                    <h3>Your new challenge is</h3>\n                    <div className=\"challenge\">\n                        {this.state.a} x {this.state.b}\n                    </div>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>\n                        Your alias:\n                        <input type=\"text\" maxLength=\"12\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Your guess:\n                        <input type=\"number\" min=\"0\"\n                               name=\"guess\"\n                               value={this.state.guess}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n                {this.state.lastAttempts.length > 0 &&\n                    <LastAttemptsComponent lastAttempts={this.state.lastAttempts}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default ChallengeComponent;","import React from 'react';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent'\n\nfunction App() {\n  return <ChallengeComponent/>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}