Centralised Configuration
=========================

Production Environment

Config Server
Staging config - disabled
Prod config - enabled

Multiplication - enabled profile prod
Get Config: Prod : Config server client

Gamification - enabled profile prod
Get Config: Prod : Config server client


Staging Environment

Config Server
Staging config - enable
Prod config - disabled

Multiplication - enabled profile staging
Get Config: Staging : Config server client

Gamification - enabled profile staging
Get Config: Staging : Config server client


Spring cloud config server project

with consul combining service discovery, health checks and centralized configuration.


Configuration in Consul
========================
You can create key value pairs in consul
http://localhost:8500/ui/dc1/kv/create

Ref : http://tpd.io/kv-api

Spring cloud consul config

Implementing Centralized config
===================================
to Multiplication Gamification and Gateway
We have created bootstrap.properties to identify the centralized configuration
To enable this behaviour we have added Spring Cloud Consul Config starter Dependency


Centralized logs
================

To see the all the component logs in one place.

Log Aggregation Pattern
=======================
Component send their logs to one place and we can view there

ELK stack and alias combination
Ref : https://tpd.io/elastic
Elastic Search - The storage system with powerful text search feature
Logstash - The agent to channel logs to Elastic search from multiple sources
Kibana - The UI tool to manage and query logs

ELK docs (http://tpd.io/elk)


A simple solution for log centralization
========================================

1. applicationId : Which application the log is belongs to
2. host:
3. routingKeyPattern: to concatenate application id + log level
4. exchangeName
5. declareExchange
6. durable : to persist or not
7. deliveryMode : log message are stored until they're consumed by the aggregator
8. generatedId: each message have the uniique id
9. charset: ensure all parties using the same encoding

Ref: https://tpd.io/logback-layout

Distributed Tracing
==================

Spring cloud Sleuth
===================

Sleuth uses : https://tpd.io/brave

Implementing Distributed Tracing
================================

Docker
======

Ref: https://tpd.io/docker-start

In Docker, we can package our application and any supporting component it may need as images.

The official public registry of images is the Docker Hub (https://tpd.io/docker-hub)

Version - 16 https://tpd.io/docker-jdk

Docker file definition
https://tpd.io/dockerfile-ref

Building a Docker Image manually
================================

docker build -t multiplication:1.0.0 .
This will create the image locally

to run that image
docker run -it -p 18080:8080 multiplication:1.0.0

Spring Boot and Build packs
===========================

From 2.3.0 Spring boot
Maven and Gradle plugins have the option to build Open Container Initiative (OCI)
images using Cloud Native Build packs (https://tpd.io/buildpacks)

./mvnw spring-boot:build-image

docker run -it -p 18081:8081 gamification:0.0.1-SNAPSHOT

Running Our System in Docker
============================

Run
./mvnw spring-boot:build-image
for logs, gamification, multiplication and gateway

then run
docker images
see all the images

For UI
npm run build -> run the build
docker build -t challenges-frontend:1.0 .


Dockerizing the configuration importer
======================================

Use the consul server

config root and
defaults,docker
application.yml

1. Set host for Rabbitmq, later we ensure rabbitmq available on that host
2. Override Instance Identifier assigned to running services to be used at the service registry.
ref : https://tpd.io/random-properies

add consul properties

consul kv export config/ > consul-kv-docker.json


Docker Compose
==============

To group container configuration and deployment instructions : Docker Compose

https://tpd.io/compose-install

https://tpd.io/compose3

Docker Images Documentation
https://tpd.io/consul-docker

docker-compose up












